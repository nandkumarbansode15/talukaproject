#spring.profiles.active=dev

# Important url
# https://github.com/Netflix/Hystrix/wiki/Configuration#threadpool-properties

#circuit close means application is working fine.
#circuit open means application going to fallback method.

#It will close or open the circuit after one request is failed or successful for any reason. (tested)
hystrix.command.OWNER-INFO-SERVICE.circuitBreaker.requestVolumeThreshold=1

#It will allow only one request at a time. (tested)
hystrix.command.OWNER-INFO-SERVICE.execution.isolation.semaphore.maxConcurrentRequests=1

#It will be used to set maximum coreSize
#hystrix.threadpool.OWNER-INFO-SERVICE.coreSize=1
#hystrix.threadpool.OWNER-INFO-SERVICE.maximumSize=1
#hystrix.threadpool.OWNER-INFO-SERVICE.allowMaximumSizeToDivergeFromCoreSize=true

#If any request is taking more than 10000 miliseconds (10 seconds) then it will treat that request is failed.
#I have kept 10000 ms(10 seconds) to test maxConcurrentRequests, It's not possible to make multiple request in 1000 ms(1 second).
hystrix.command.OWNER-INFO-SERVICE.execution.isolation.thread.timeoutInMilliseconds=10000

#It will allow only one request will be catched by fallback, all other request will be rejected.
#It is not possible to test on local because fallback method can't be call multiple times at a time (For this we need multiple user).
hystrix.command.OWNER-INFO-SERVICE.fallback.isolation.semaphore.maxConcurrentRequests=1

# It will close or open the circuit if 10% of requests are failed or successful for any reason. 
#hystrix.command.OWNER-INFO-SERVICE.circuitBreaker.errorThresholdPercentage=10

#It will close circuit after 1 seconds, if it's already open.
hystrix.command.OWNER-INFO-SERVICE.circuitBreaker.sleepWindowInMilliseconds=1000

#It will calculate the metric/statics of circuit breaker for 10 seconds(10000 miliseconds)
hystrix.command.OWNER-INFO-SERVICE.metrics.rollingStats.timeInMilliseconds=10000

#Hystrix.dashboard url is http://localhost:9295/hystrix
#Hystrix stream url is http://localhost:9191/actuator/hystrix.stream